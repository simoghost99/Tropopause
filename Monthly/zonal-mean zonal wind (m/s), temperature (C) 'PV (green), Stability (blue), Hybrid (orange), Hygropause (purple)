# -*- coding: utf-8 -*-
"""
Monthly mean tropopause analysis with multiple methods - OPTIMIZED
"""

import numpy as np
import netCDF4 as nc
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import math as M
import os
import time

# -------------------------
# Constants
# -------------------------
GRAVITY = 9.80665
RD = 287.05
CP = 1004.0
RKAPPA = RD / CP
RADIUS_EARTH = 6370000.0
OMEGA_EARTH = 0.00007292

# -------------------------
# Paths
# -------------------------
direcInput = "C:/Users/moham/OneDrive/Documents/stage"
direcOutput = "C:/Users/moham/OneDrive/Documents/stage"
nc_file = os.path.join(direcInput, "629f42bac50cf310898d868e4fd1d664.nc")

os.makedirs(direcOutput, exist_ok=True)

# =========================
# Vectorized tropopause detection
# =========================
def find_tropopause_vectorized(ktroptype, temp_zm_tm, q_zm_tm, pp_pa):
    """
    Vectorized tropopause detection for all latitudes at once
    """
    nlev, nlat = temp_zm_tm.shape
    pp_tb = np.sort(pp_pa)
    order_idx = np.argsort(pp_pa)
    
    # Reorder data to be top-to-bottom
    temp_tb = temp_zm_tm[order_idx, :]
    q_tb = q_zm_tm[order_idx, :]
    
    # Initialize results
    tropopause_pressures = np.full(nlat, np.nan)
    
    # Find valid pressure range (70-500 hPa)
    valid_p_mask = (pp_tb >= 7000) & (pp_tb <= 50000)
    valid_indices = np.where(valid_p_mask)[0]
    
    if ktroptype == 1:  # Stability method
        for j in valid_indices:
            if j < 1 or j > nlev-2:
                continue
                
            # Calculate stability criterion for all latitudes at once
            dT_dp = (temp_tb[j+1, :] - temp_tb[j-1, :]) / (pp_tb[j+1] - pp_tb[j-1])
            stability_criterion = (pp_tb[j] / temp_tb[j, :]) * dT_dp + (RD * temp_tb[j, :] / (GRAVITY*GRAVITY)) * 2.5e-4
            
            # Update where criterion is met and not already set
            mask = (stability_criterion >= RD/CP) & np.isnan(tropopause_pressures)
            tropopause_pressures[mask] = pp_tb[j]
    
    elif ktroptype == 2:  # Hygropause method
        for j in valid_indices:
            if j < 2:
                continue
                
            # Check humidity conditions for all latitudes at once
            mask = (q_tb[j, :] > 3.0e-6) & (q_tb[j-2, :] > 5.0e-6) & np.isnan(tropopause_pressures)
            tropopause_pressures[mask] = pp_tb[j]
    
    elif ktroptype == 3:  # Hybrid method
        RD_loc = 287.05
        RG_loc = 9.80665
        RKAPPA_loc = 0.2854
        
        for j in valid_indices:
            if j < 2 or j > nlev-2:
                continue
                
            # Calculate stability criterion
            zstab = (pp_tb[j+1] * (temp_tb[j+2, :] - temp_tb[j, :]) / 
                    (temp_tb[j+1, :] * (pp_tb[j+2] - pp_tb[j]))) + \
                    (RD_loc * temp_tb[j+1, :] * 2.5e-4 / (RG_loc * RG_loc))
            
            # Check initial conditions
            initial_mask = (q_tb[j, :] > 3.0e-6) & (zstab > RKAPPA_loc) & np.isnan(tropopause_pressures)
            
            if np.any(initial_mask):
                # For latitudes that meet initial conditions, check +600m condition
                for lat_idx in np.where(initial_mask)[0]:
                    za = (temp_tb[j+1, lat_idx] - temp_tb[j, lat_idx]) / \
                         (pp_tb[j+1]**RKAPPA_loc - pp_tb[j]**RKAPPA_loc)
                    zb = temp_tb[j, lat_idx] - za * pp_tb[j]**RKAPPA_loc
                    ztm = 0.5 * (pp_tb[j+1]**RKAPPA_loc + pp_tb[j]**RKAPPA_loc) * za + zb
                    zpm = (0.5 * (pp_tb[j+1]**RKAPPA_loc + pp_tb[j]**RKAPPA_loc))**(1.0 / RKAPPA_loc)
                    zp600m = zpm + 600.0 * RG_loc * zpm / (RD_loc * ztm)
                    
                    # Find level where pressure exceeds zp600m
                    jj = j
                    while jj <= nlev-3 and (0.5 * (pp_tb[jj+2]**RKAPPA_loc + pp_tb[jj+1]**RKAPPA_loc))**(1.0 / RKAPPA_loc) <= zp600m:
                        jj += 1
                    
                    if jj < nlev and q_tb[min(jj, nlev-1), lat_idx] > 5.0e-6:
                        tropopause_pressures[lat_idx] = pp_tb[j]
    
    return tropopause_pressures

# =========================
# Main - OPTIMIZED
# =========================
if __name__ == "__main__":
    start_time = time.time()
    
    print("Opening NetCDF:", nc_file)
    with nc.Dataset(nc_file, mode='r') as f:
        # Read basic dimensions
        lat = f.variables["latitude"][:]
        lon = f.variables["longitude"][:]
        plev_hpa = f.variables["pressure_level"][:]
        pp_pa = plev_hpa * 100.0
        
        print("Reading and processing data...")
        
        # Read all data at once for efficiency
        u = f.variables["u"][:, :, :, :]   # time, level, lat, lon
        temp = f.variables["t"][:, :, :, :]
        pv = f.variables["pv"][:, :, :, :]  # PV in PVU units
        pv = pv * 1e6  # convert PV to PVU
        q = f.variables["q"][:, :, :, :]   vbn
        nlev_len, ny_len = temp_zm_tm.shape
        
        print("Calculating tropopause using different methods...")
        
        # Calculate all tropopause types at once
        pTropopauseStab = find_tropopause_vectorized(1, temp_zm_tm, q_zm_tm, pp_pa)
        pHygropause = find_tropopause_vectorized(2, temp_zm_tm, q_zm_tm, pp_pa)
        pHybrid = find_tropopause_vectorized(3, temp_zm_tm, q_zm_tm, pp_pa)
        
        # Prepare for plotting
        paxis = np.log10(pp_pa / 100)  # log10 of pressure in hPa
        ptop = 0.8  # log10(10 hPa)
        pbot = 3.0  # log10(1000 hPa)
        
        # Filter PV values to remove illogical values at high and low pressures
        # Set PV to zero above 500 hPa for better visualization (like in reference code)
        for nlev in range(nlev_len): 
            for ny in range(ny_len):
                if pp_pa[nlev] > 50000: 
                    pv_zm_tm[nlev, ny] = 0.0
        
        print("Creating plot...")
        
        # ---------- PLOT ----------
        plt.figure(figsize=(12, 7))
        plt.axis([lat[-1], lat[0] + 0.1, pbot, ptop])
        
        # Create legend
        legend_elements = [
            Line2D([0], [0], color='green', lw=4, label='Dynamical Tropopause (PV=2)'),
            Line2D([0], [0], marker='s', color='blue', lw=0, label='Stability Tropopause',
                   markersize=8, markeredgewidth=2),
            Line2D([0], [0], marker='D', color='purple', lw=0, label='Hygropause',
                   markersize=8, markeredgewidth=2),
            Line2D([0], [0], marker='^', color='orange', lw=0, label='Hybrid Tropopause',
                   markersize=8, markeredgewidth=2)
        ]
        plt.legend(handles=legend_elements, loc='upper right', fontsize=10, framealpha=0.8, facecolor='white')
        
        # Plot zonal wind contours (exactly like reference code)
        CS = plt.contour(lat, paxis, u_zm_tm, linewidths=1, levels=[5,10,15,25,30,35,45,50,55,65,70,75], 
                         linestyles='solid', colors='black')
        CS = plt.contour(lat, paxis, u_zm_tm, linewidths=4, levels=[20,40,60,80], 
                         linestyles='solid', colors='black')
        plt.clabel(CS, fontsize=12, inline=1, fmt='%1.0f')
        
        CS = plt.contour(lat, paxis, u_zm_tm, linewidths=1, levels=[-70,-65,-55,-50,-45,-35,-30,-25,-15,-10,-5], 
                         linestyles='dashed', colors='black')
        CS = plt.contour(lat, paxis, u_zm_tm, linewidths=2, levels=[-60,-40,-20], 
                         linestyles='dashed', colors='black')
        plt.clabel(CS, fontsize=12, inline=1, fmt='%1.0f')
        
        # Plot temperature contours (exactly like reference code)
        temp_c = temp_zm_tm - 273.16
        CS = plt.contour(lat, paxis, temp_c, linewidths=1, levels=[10,20,30,40], 
                         linestyles='solid', colors='red')
        CS = plt.contour(lat, paxis, temp_c, linewidths=3, levels=[0], 
                         linestyles='dashed', colors='c')
        plt.clabel(CS, fontsize=14, inline=1, fmt='%1.0f')
        
        CS = plt.contour(lat, paxis, temp_c, linewidths=1, levels=[-70,-50,-40,-30,-20,-10], 
                         linestyles='solid', colors='blue')
        CS = plt.contour(lat, paxis, temp_c, linewidths=3, levels=[-80,-60], 
                         linestyles='solid', colors='blue')
        plt.clabel(CS, fontsize=14, inline=1, fmt='%1.0f')
        
        # Fill temperature regions (exactly like reference code)
        plt.contourf(lat, paxis, temp_c, levels=[-120,-80.1], colors='mediumorchid') 
        plt.contourf(lat, paxis, temp_c, levels=[-79.9,-60], colors='lightskyblue') 
        plt.contourf(lat, paxis, temp_c, levels=[10,60], colors='lightsalmon')  
        plt.contourf(lat, paxis, temp_c, levels=[-60,0], colors='lightcyan') 
        
        # DRAW THE DYNAMICAL TROPOPAUSE (exactly like reference code)
        # Only plot the PV=2 and PV=-2 contours - REMOVED the old separate NH/SH plotting
        CP = plt.contour(lat, paxis, pv_zm_tm, levels=[-2, +2], linestyles='solid', 
                         linewidths=7.0, colors='green')
        plt.clabel(CP, fontsize=12, inline=1, fmt='%1.0f', colors='green')
        
        # Plot all tropopause types
        valid_lat_mask = np.abs(lat) < 88.0
        
        # Stability tropopause
        stab_mask = valid_lat_mask & ~np.isnan(pTropopauseStab)
        plt.plot(lat[stab_mask], np.log10(pTropopauseStab[stab_mask]/100), "s", 
                 markersize=6, color='blue')
        
        # Hygropause
        hygro_mask = valid_lat_mask & ~np.isnan(pHygropause)
        plt.plot(lat[hygro_mask], np.log10(pHygropause[hygro_mask]/100), "D", 
                 markersize=6, color='purple')
        
        # Hybrid tropopause
        hybrid_mask = valid_lat_mask & ~np.isnan(pHybrid)
        plt.plot(lat[hybrid_mask], np.log10(pHybrid[hybrid_mask]/100), "^", 
                 markersize=6, color='orange')
        
        # Final plot formatting
        plt.xticks(np.arange(lat[-1], lat[0] + 0.1, 15), fontsize=15)
        plt.yticks(np.arange(pbot, ptop, -1), fontsize=15)
        
        ax = plt.gca()
        ax.axes.yaxis.set_ticklabels([])
        
        # Add pressure labels
        plt.text(lat[-1]-14, 3, "1000", fontsize=15)
        plt.text(lat[-1]-11, 2.02, "100", fontsize=15)
        plt.text(lat[-1]-8, 1.02, "10", fontsize=15)
        plt.text(lat[-1]-11, 2.497, "300", fontsize=15)
        plt.text(lat[-1]-8, 1.497, "30", fontsize=15)
        plt.text(lat[-1]-11, 2.72, "500", fontsize=15)
        plt.text(lat[-1]-8, 1.72, "50", fontsize=15)
        plt.text(lat[-1]-11, 2.32, "200", fontsize=15)
        plt.text(lat[-1]-8, 1.32, "20", fontsize=15)
        
        # Title and labels
        plt.title('Monthly/zonal-mean zonal wind (m/s), temperature (C)\n'
                  'PV (green), Stability (blue), Hybrid (orange), Hygropause (purple)', 
                  fontsize=10)
        
        plt.text(80, 3.20, "ERA5", fontsize=8)
        plt.text(80, 3.25, "Tropopause Analysis", fontsize=8)
        
        plt.xlabel('latitude [degrees north]', fontsize=16)
        plt.text(lat[-1]-20, 2.3, 'pressure (hPa)', rotation=90, va='center', fontsize=16)
        
        # Save and show
        outfile = os.path.join(direcOutput, "tropopause_cross_section_optimized.png")
        plt.savefig(outfile, dpi=300, bbox_inches='tight')
        plt.show()
        plt.close()
        
        elapsed_time = time.time() - start_time
        print(f"Saved: {outfile}")
        print(f"Execution time: {elapsed_time:.2f} seconds")

    print("All done: Monthly mean tropopause cross-section generated.")
