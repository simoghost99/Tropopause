import numpy as np
import netCDF4 as nc
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from datetime import datetime
import time as timemod
import matplotlib.colors as mcolors
from scipy.interpolate import griddata
from scipy.ndimage import gaussian_filter

# Conversion factor: 1 PVU = 10^-6 K m² kg⁻¹ s⁻¹
PVU_CONVERSION = 1e6

# Directory setup
direcInput = "C:/Users/moham/OneDrive/Documents/stage"
direcOutput = "C:/Users/moham/OneDrive/Documents/stage"

# Create a custom colormap (cold → hot)
colors = ['darkviolet', 'blue', 'dodgerblue', 'cyan', 'lime', 'yellow', 'orange', 'red']
cmap = mcolors.LinearSegmentedColormap.from_list('pressure_cmap', colors, N=256)

# Open the NetCDF file
print("Opening the NetCDF file...")
with nc.Dataset(direcInput+"/ccc0ef6b2ac2bf8b41aa735ee395b5a1.nc", mode='r') as f:
    # Read data
    lat = f.variables["latitude"][:] 
    lon = f.variables["longitude"][:] 
    time = f.variables["valid_time"][:]
    p_levels = f.variables["pressure_level"][:]  # Pressure levels in hPa

    print(f"Original dimensions: lat={len(lat)}, lon={len(lon)}")

    # Convert longitudes from 0-360° to -180-180°
    lon_corrected = np.where(lon > 180, lon - 360, lon)
    
    # FULL REGION OF MOROCCO (including Western Sahara) and Europe
    lat_min, lat_max = 20, 55   # From the southern Sahara to the northern Europe
    lon_min, lon_max = -30, 30  # From the Atlantic to the eastern border of Europe
    
    # Find the corresponding indices
    lat_indices = np.where((lat >= lat_min) & (lat <= lat_max))[0]
    lon_indices = np.where((lon_corrected >= lon_min) & (lon_corrected <= lon_max))[0]
    
    # Select the data subsets
    lat_region = lat[lat_indices]
    lon_region = lon_corrected[lon_indices]

    print(f"Europe + Morocco region: {len(lat_region)}x{len(lon_region)} points")
    print(f"Range: {lat_region.min():.1f}°N to {lat_region.max():.1f}°N, {lon_region.min():.1f}°E to {lon_region.max():.1f}°E")

    # Create maps
    for i in range(min(16, len(time))):
        start_time = timemod.time()
        print(f"\nProcessing timestep {i+1}...")
        
        # Read data
        pv_data = f.variables["pv"][i, :, lat_indices[0]:lat_indices[-1]+1, lon_indices[0]:lon_indices[-1]+1]
        pv_time = pv_data * PVU_CONVERSION
        
        # Search for the PVU=1.5 surface
        pvu_target = 1.5
        p_level_15pvu = np.full((len(lat_region), len(lon_region)), np.nan)
        
        for lat_idx in range(len(lat_region)):
            for lon_idx in range(len(lon_region)):
                pv_profile = pv_time[:, lat_idx, lon_idx]
                
                if np.any(np.isfinite(pv_profile)):
                    diff = np.abs(pv_profile - pvu_target)
                    level_idx = np.argmin(diff)
                    
                    if diff[level_idx] < 0.5:
                        p_level_15pvu[lat_idx, lon_idx] = p_levels[level_idx]
        
        # Prepare data for interpolation
        lon_grid, lat_grid = np.meshgrid(lon_region, lat_region)
        valid_mask = ~np.isnan(p_level_15pvu)
        valid_points = np.column_stack((lon_grid[valid_mask], lat_grid[valid_mask]))
        valid_values = p_level_15pvu[valid_mask]
        
        if len(valid_values) < 30:
            print(f"Not enough valid points ({len(valid_values)})")
            continue
        
        # Create a grid for interpolation
        lon_fine = np.linspace(lon_min, lon_max, 80)
        lat_fine = np.linspace(lat_min, lat_max, 80)
        lon_fine_grid, lat_fine_grid = np.meshgrid(lon_fine, lat_fine)
        
        # Interpolation
        p_level_interp = griddata(valid_points, valid_values, 
                                 (lon_fine_grid, lat_fine_grid), method='linear')
        
        # Smoothing
        p_level_interp = gaussian_filter(p_level_interp, sigma=1.5)
        
        # Create figure with Cartopy
        fig = plt.figure(figsize=(14, 12))
        ax = plt.axes(projection=ccrs.PlateCarree())
        
        # Define map extent (Europe + Morocco)
        ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())
        
        # Add geographical features without borders
        ax.add_feature(cfeature.COASTLINE, linewidth=0.8)
        ax.add_feature(cfeature.OCEAN, color='lightblue', alpha=0.3)
        ax.add_feature(cfeature.LAND, color='lightgray', alpha=0.2)
        
        # Add gridlines
        gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,
                         linewidth=0.5, color='gray', alpha=0.5, linestyle='--')
        gl.top_labels = False
        gl.right_labels = False
        gl.xlabel_style = {'size': 8}
        gl.ylabel_style = {'size': 8}
        
        # Determine contour levels for the entire map
        p_min, p_max = np.nanmin(valid_values), np.nanmax(valid_values)
        contour_levels = np.arange(np.floor(p_min / 50) * 50, np.ceil(p_max / 50) * 50 + 50, 50)
        norm = mcolors.Normalize(vmin=p_min, vmax=p_max)

        # Reduce contour levels if necessary
        if len(contour_levels) > 12:
            contour_levels = contour_levels[::2]  # Take a coarser sample if there are too many levels
        
        # Plot contours over the entire map
        for level in contour_levels:
            color = cmap(norm(level))
            cs = ax.contour(lon_fine_grid, lat_fine_grid, p_level_interp,
                             levels=[level], colors=[color], linewidths=2.5,
                             transform=ccrs.PlateCarree())
            
            # Add labels
            if level % 100 == 0:
                ax.clabel(cs, fmt='%d hPa', fontsize=8, colors='black')
        
        # Title
        time_val = time[i]
        time_dt = datetime.fromtimestamp(time_val)
        time_str = time_dt.strftime('%Y-%m-%d %H:%M UTC')
        
        plt.title(f'Isobars at PVU=1.5 - {time_str}\nRegion: Europe + Morocco', 
                 fontsize=14, pad=20)
        
        # Add colorbar
        cbar = plt.colorbar(plt.cm.ScalarMappable(norm=norm, cmap=cmap),
                           ax=ax, orientation='horizontal', pad=0.05, aspect=30)
        cbar.set_label('Pressure (hPa)', fontsize=11)
        
        # Save the figure
        plt.savefig(direcOutput + f"/map_europe_morocco_cartopy_{i:02d}.png", dpi=300, bbox_inches='tight')
        plt.show()
        plt.close()
        
        end_time = timemod.time()
        print(f"Map {i+1} generated in {end_time - start_time:.1f} seconds")

print("All Europe + Morocco maps have been generated with Cartopy!")
