import numpy as np
import netCDF4 as nc
import matplotlib.pyplot as plt
import math as M
import os

# Constants
pref = 100000.0
p0 = pref
g = 9.81
Rd = 287.0
cp = 1005.0
kappa = Rd / cp
radius_earth = 6370000.0
pi = M.pi
omega_earth = 0.00007292

# Input and Output directories
direcInput = r"C:\Users\moham\OneDrive\Documents\stage"
direcOutput = r"C:\Users\moham\OneDrive\Documents\stage"

# Year and Month selection
year = 2010
month = "Jan"

# Map the month to the correct index for time
month_to_index = {
    "Jan": 0, "Feb": 124, "Mar": 236, "Apr": 360, "May": 480,
    "Jun": 604, "Jul": 724, "Aug": 848, "Sep": 972, "Oct": 1092,
    "Nov": 1216, "Dec": 1336
}
nt0 = month_to_index[month]

# Open the NetCDF file
file_path = os.path.join(direcInput, f"ERA-I_pv_t_u_[p]_{month}{year}_4xd_2deg_global.nc")
a = nc.Dataset(file_path, mode='r')

# Extract variables
lat = a.variables["latitude"][:]
lon = a.variables["longitude"][:]
p = 100 * a.variables["level"][:]  # pressure in Pa
time = a.variables["time"][:]

# Initialize arrays
ny_len = len(lat)
nx_len = len(lon)
nt_len = len(time)
nlev_len = len(p)

# Coriolis parameter
fcor = np.zeros((ny_len), dtype='d')
for ny in range(ny_len):
    fcor[ny] = 2 * omega_earth * M.sin(lat[ny] * pi / 180.)

# Variables u, temp, and pv
u = a.variables["u"][:,:,:,:]  # time, level, lat, lon
temp = a.variables["t"][:,:,:,:]  # time, level, lat, lon
pv = 1000000 * a.variables["pv"][:,:,:,:]  # time, level, lat, lon

# Set boundary conditions for u
u[:,:,0,:] = 0
u[:,:,ny_len-1,:] = 0

# Zonal mean
u_zm = np.mean(u, axis=3)
temp_zm = np.mean(temp, axis=3)
pv_zm = np.mean(pv, axis=3)

u_zm[:,:,0] = 0
u_zm[:,:,ny_len-1] = 0
temp_zm[:,:,0] = temp_zm[:,:,1]
temp_zm[:,:,ny_len-1] = temp_zm[:,:,ny_len-2]

# Time-mean zonal
u_zm_tm = np.mean(u_zm, axis=0)
temp_zm_tm = np.mean(temp_zm, axis=0)
pv_zm_tm = np.mean(pv_zm, axis=0)

u_zm_tm[:,0] = 0
u_zm_tm[:,ny_len-1] = 0

# Calculate lapse rate
LapseRate = np.zeros((nlev_len, ny_len), dtype='d')
for ny in range(ny_len):
    for nlev in range(nlev_len-1):
        temp1 = temp_zm_tm[nlev, ny]
        temp2 = temp_zm_tm[nlev+1, ny]
        ro_zm_tm1 = p[nlev] / (Rd * temp1)
        ro_zm_tm2 = p[nlev+1] / (Rd * temp2)
        ro_zm_tm = 0.5 * (ro_zm_tm1 + ro_zm_tm2)
        dz = -(p[nlev] - p[nlev+1]) / (g * ro_zm_tm)
        dtemp = temp1 - temp2
        LapseRate[nlev, ny] = 1000 * dtemp / dz  # K / km

# Find height of WMO tropopause
pTropopauseWMO = np.zeros((ny_len), dtype='d')
for ny in range(ny_len):
    flag = 0
    for nlev in range(nlev_len-2, 0, -1):  # scan from high to low pressure
        if (LapseRate[nlev, ny] > -2) and (flag == 0):
            pTropopauseWMO[ny] = 0.5 * (p[nlev+1] + p[nlev])
            if pTropopauseWMO[ny] < 50000:
                flag = 1

# Log p-axis
paxis = np.zeros((nlev_len), dtype='d')
for nlev in range(nlev_len):
    paxis[nlev] = M.log(p[nlev] / 100, 10)

# Plotting
plt.figure(figsize=(12, 7))
plt.axis([lat[ny_len-1], lat[0]+0.1, 3.0, 0.8])

CS = plt.contour(lat, paxis, u_zm_tm, linewidths=1, levels=[5,10,15,25,30,35,45,50,55,65,70,75], linestyles='solid', colors='black')
CS = plt.contour(lat, paxis, u_zm_tm, linewidths=4, levels=[20,40,60,80], linestyles='solid', colors='black')
plt.clabel(CS, fontsize=12, inline=1, fmt='%1.0f')

CS = plt.contour(lat, paxis, u_zm_tm, linewidths=1, levels=[-70,-65,-55,-50,-45,-35,-30,-25,-15,-10,-5], linestyles='dashed', colors='black')
CS = plt.contour(lat, paxis, u_zm_tm, linewidths=2, levels=[-60,-40,-20], linestyles='dashed', colors='black')
plt.clabel(CS, fontsize=12, inline=1, fmt='%1.0f')


# Dynamical tropopause contour
CP = plt.contour(lat, paxis, pv_zm_tm, levels=[-2, +2], linestyles='solid', linewidths=7.0, colors=('green'))
plt.clabel(CP, fontsize=12, inline=1, fmt='%1.0f', colors=('green'))

# Plot WMO tropopause
for ny in range(ny_len):
    if abs(lat[ny]) < 88.0:
        plt.plot(lat[ny], M.log(pTropopauseWMO[ny] / 100, 10), "o", markersize=6, color=('red'))

# Formatting
plt.xticks(np.arange(lat[ny_len-1], lat[0]+0.1, 15), fontsize=15)
plt.yticks(np.arange(3.0, 0.8, -1), fontsize=15)

ax = plt.gca()
ax.axes.yaxis.set_ticklabels([])

plt.text(lat[ny_len-1]-14, 3, "1000", fontsize=15)
plt.text(lat[ny_len-1]-11, 2.02, "100", fontsize=15)
plt.text(lat[ny_len-1]-8, 1.02, "10", fontsize=15)

plt.title(f'Monthly/zonal-mean zonal wind vel. (int.: 5 m/s), temperature (int.: 10Â°C), thermal and dynamical tropopause (red/green) {month} {year}', fontsize=10)

plt.xlabel('Latitude [degrees north]', fontsize=16)
plt.text(lat[ny_len-1]-20, 2.3, 'Pressure (hPa)', rotation=90, va='center', fontsize=16)

# Save and show the plot
plt.savefig(os.path.join(direcOutput, f"u_temp_zm_tm_{month}{year}.png"))
plt.show()
