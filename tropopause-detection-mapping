import numpy as np
import netCDF4 as nc
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from datetime import datetime
import time as timemod
import matplotlib.colors as mcolors
from scipy.interpolate import griddata
from scipy.ndimage import gaussian_filter
import geopandas as gpd
import cartopy.feature as cfeature
# Constants
GRAVITY = 9.80665
RD = 287.05
RKAPPA = 0.2854

# Directory setup
direcInput = "C:/Users/moham/OneDrive/Documents/stage"
direcOutput = "C:/Users/moham/OneDrive/Documents/stage"

# Create a professional colormap for tropopause pressure
colors = ['#000080', '#0000FF', '#0080FF', '#00FFFF', '#80FF80', 
          '#FFFF00', '#FF8000', '#FF0000', '#800000']
cmap = mcolors.LinearSegmentedColormap.from_list('tropopause_cmap', colors, N=256)

def find_tropopause_level(temp_profile, q_profile, p_levels_pa):
    """
    Find tropopause level using WMO definition
    """
    nlev = len(temp_profile)
    
    # Calculate lapse rates directly from pressure levels
    lapse_rates = np.zeros(nlev - 1)
    for i in range(nlev - 1):
        # dT/dz ≈ (dT/dp) * (dp/dz) ≈ (dT/dp) * (-ρg)
        # Simplified lapse rate calculation
        dT = temp_profile[i+1] - temp_profile[i]
        dp = p_levels_pa[i+1] - p_levels_pa[i]
        if dp != 0:
            lapse_rates[i] = (dT / dp) * (-p_levels_pa[i] * GRAVITY / (RD * temp_profile[i])) * 1000
    
    # Find tropopause using WMO criteria
    for i in range(15, nlev - 5):  # Start from around 400 hPa
        if lapse_rates[i] <= 2.0:  # 2°C/km or less
            # Check if this is a consistent tropopause
            if (np.mean(lapse_rates[i:i+3]) <= 2.0 and 
                q_profile[i] < 5e-6):  # Dry air
                return i
    
    # Fallback: cold point tropopause
    min_temp_idx = np.argmin(temp_profile[15:]) + 15
    return min_temp_idx

def detect_tropopause_stability(temp_profile, q_profile, p_levels_pa):
    """Detect tropopause using stability method."""
    try:
        trop_level = find_tropopause_level(temp_profile, q_profile, p_levels_pa)
        return p_levels_pa[trop_level] / 100  # Convert to hPa
    except:
        return np.nan

def detect_tropopause_hygropause(temp_profile, q_profile, p_levels_pa):
    try:
        for i in range(10, len(q_profile) - 5):  # start a bit lower (~700 hPa)
            # Threshold less strict
            if (q_profile[i] < 5e-6 and np.mean(q_profile[i:i+3]) < 1e-5):
                return p_levels_pa[i] / 100
        return np.nan
    except:
        return np.nan


def detect_tropopause_hybrid(temp_profile, q_profile, p_levels_pa):
    """Detect tropopause using hybrid method."""
    p_stab = detect_tropopause_stability(temp_profile, q_profile, p_levels_pa)
    p_hygro = detect_tropopause_hygropause(temp_profile, q_profile, p_levels_pa)
    
    if np.isnan(p_stab) and np.isnan(p_hygro):
        return np.nan
    elif np.isnan(p_stab):
        return p_hygro
    elif np.isnan(p_hygro):
        return p_stab
    
    return min(p_stab, p_hygro)

# Open the NetCDF file
print("Opening the NetCDF file...")
with nc.Dataset(direcInput+"/629f42bac50cf310898d868e4fd1d664.nc", mode='r') as f:
    # Read data
    lat = f.variables["latitude"][:] 
    lon = f.variables["longitude"][:] 
    time = f.variables["valid_time"][:]
    p_levels = f.variables["pressure_level"][:]  # Pressure levels in hPa
    p_levels_pa = p_levels * 100  # Convert to Pa

    print(f"Pressure levels available: {p_levels} hPa")

    # Convert longitudes
    lon_corrected = np.where(lon > 180, lon - 360, lon)
    
    # Exact region boundaries as requested
    lat_min, lat_max = 20, 55   # Exactly 20°N to 55°N
    lon_min, lon_max = -30, 30  # Exactly 30°W to 30°E
    
    lat_indices = np.where((lat >= lat_min) & (lat <= lat_max))[0]
    lon_indices = np.where((lon_corrected >= lon_min) & (lon_corrected <= lon_max))[0]
    
    lat_region = lat[lat_indices]
    lon_region = lon_corrected[lon_indices]

    print(f"Region: {len(lat_region)}x{len(lon_region)} points")
    print(f"Exact range: {lat_region.min():.1f}°N to {lat_region.max():.1f}°N, {lon_region.min():.1f}°E to {lon_region.max():.1f}°E")

    methods = ['stability', 'hygropause', 'hybrid']
    
    for i in range(min(16, len(time))):
        start_time = timemod.time()
        print(f"\nProcessing timestep {i+1}...")
        
        temp_data = f.variables["t"][i, :, lat_indices[0]:lat_indices[-1]+1, lon_indices[0]:lon_indices[-1]+1]
        q_data = f.variables["q"][i, :, lat_indices[0]:lat_indices[-1]+1, lon_indices[0]:lon_indices[-1]+1]
        
        for method in methods:
            print(f"Processing {method} method...")
            
            tropopause_p = np.full((len(lat_region), len(lon_region)), np.nan)
            valid_count = 0
            
            for lat_idx in range(len(lat_region)):
                for lon_idx in range(len(lon_region)):
                    temp_profile = temp_data[:, lat_idx, lon_idx]
                    q_profile = q_data[:, lat_idx, lon_idx]
                    
                    if np.all(np.isfinite(temp_profile)) and np.all(np.isfinite(q_profile)):
                        if method == 'stability':
                            p_trop = detect_tropopause_stability(temp_profile, q_profile, p_levels_pa)
                        elif method == 'hygropause':
                            p_trop = detect_tropopause_hygropause(temp_profile, q_profile, p_levels_pa)
                        elif method == 'hybrid':
                            p_trop = detect_tropopause_hybrid(temp_profile, q_profile, p_levels_pa)
                        
                        if not np.isnan(p_trop) and 50 < p_trop < 500:
                            tropopause_p[lat_idx, lon_idx] = p_trop
                            valid_count += 1
            
            print(f"Found {valid_count} valid points")
            
            if valid_count < 30:
                continue
            
            # Prepare for interpolation
            lon_grid, lat_grid = np.meshgrid(lon_region, lat_region)
            valid_mask = ~np.isnan(tropopause_p)
            
            if np.sum(valid_mask) == 0:
                continue
                
            valid_points = np.column_stack((lon_grid[valid_mask], lat_grid[valid_mask]))
            valid_values = tropopause_p[valid_mask]
            
            # Create interpolation grid - exactly matching the region boundaries
            lon_fine = np.linspace(lon_min, lon_max, 120)  # Higher resolution
            lat_fine = np.linspace(lat_min, lat_max, 120)
            lon_fine_grid, lat_fine_grid = np.meshgrid(lon_fine, lat_fine)
            
            # Interpolate and smooth
            p_interp = griddata(valid_points, valid_values, 
                               (lon_fine_grid, lat_fine_grid), method='cubic')
            p_interp = gaussian_filter(p_interp, sigma=1.2)
            p_interp = np.clip(p_interp, 80, 350)

            # Create professional meteorological plot
            fig = plt.figure(figsize=(16, 12))
            ax = plt.axes(projection=ccrs.PlateCarree())
        
            # Set EXACT map extent - no margins
            ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())
        

            # Add coastlines
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.8, edgecolor='black')

        

            # Load Morocco shapefile (ADM0 = whole country, no subdivisions)
            morocco = gpd.read_file(r"C:/Users/moham/OneDrive/Documents/stage/Morocco_ADM0_simplified.simplified.geojson")

            # Draw Morocco outline
            for geometry in morocco["geometry"]:
                ax.add_geometries(
                    [geometry],
                    crs=ccrs.PlateCarree(),
                    facecolor='none',
                    edgecolor='black',
                    linewidth=1.5,   # a bit thicker to highlight
                    zorder=5
                )

           
            # Add gridlines with exact boundaries
            gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True,
                             linewidth=0.5, color='gray', alpha=0.7, linestyle='--')
            gl.top_labels = False
            gl.right_labels = False
            gl.left_labels = True
            gl.bottom_labels = True
            gl.xlocator = plt.FixedLocator(np.arange(-30, 31, 10))  # 30W, 20W, 10W, 0, 10E, 20E, 30E
            gl.ylocator = plt.FixedLocator(np.arange(20, 56, 5))    # 20N, 25N, 30N, 35N, 40N, 45N, 50N, 55N
            gl.xlabel_style = {'size': 10, 'color': 'black'}
            gl.ylabel_style = {'size': 10, 'color': 'black'}

            # Plot filled contours
            levels = np.arange(80, 351, 10)
            cs = ax.contourf(lon_fine_grid, lat_fine_grid, p_interp,
                           levels=levels, cmap=cmap, transform=ccrs.PlateCarree(),
                           alpha=0.8, extend='both')
            
            # Plot contour lines
            contour_lines = ax.contour(lon_fine_grid, lat_fine_grid, p_interp,
                                     levels=levels, colors='black', linewidths=0.8,
                                     transform=ccrs.PlateCarree(), alpha=0.7)
            
            # Add contour labels (every other level)
            plt.clabel(contour_lines, levels=levels[::2], fmt='%d', fontsize=9,
                      colors='black', inline=True, inline_spacing=5)
            
            # Add time information
            time_val = time[i]
            time_dt = datetime.fromtimestamp(time_val)
            time_str = time_dt.strftime('%Y-%m-%d %H:%M UTC')
            
            method_name = method.capitalize()
            if method == 'hygropause':
                method_name = 'Hygropause'
            
            # Professional title
            plt.title(f'Tropopause Pressure Analysis - {method_name} Method\n{time_str}',
                     fontsize=16, fontweight='bold', pad=20)
            
            # Add colorbar
            cbar = plt.colorbar(cs, ax=ax, orientation='horizontal', 
                               pad=0.08, aspect=40, shrink=0.8)
            cbar.set_label('Tropopause Pressure (hPa)', fontsize=12, fontweight='bold')
            cbar.ax.tick_params(labelsize=10)
            
            # Add scale and credit
            plt.text(0.02, 0.02, 'Data: ECMWF ERA5', transform=ax.transAxes,
                    fontsize=9, color='gray', alpha=0.7)
            
            # Add exact latitude/longitude boundaries
            plt.text(0.98, 0.02, f'Lon: {lon_min}°E to {lon_max}°E\nLat: {lat_min}°N to {lat_max}°N',
                    transform=ax.transAxes, fontsize=9, color='gray', alpha=0.7,
                    horizontalalignment='right')
            
            # Save high-quality figure
            plt.savefig(direcOutput + f"/tropopause_{method}_{i:02d}.png", 
                       dpi=300, bbox_inches='tight', facecolor='white')
            plt.show()
            plt.close()
            
            end_time = timemod.time()
            print(f"{method_name} map {i+1} generated in {end_time - start_time:.1f}s")

print("All tropopause maps generated successfully!")
